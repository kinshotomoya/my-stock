my-fork-join-executor {
  // https://akka-ja-2411-translated.netlify.app/scala/dispatchers.html#ディスパッチャの種類
  // https://blog.knoldus.com/akka-dispatcher-all-that-you-need-to-know/
  type = Dispatcher

  // executorは、fork-join-executorと、thread-pool-executorがある。
  // それぞれの違いは以下参照
  // akkaは、デフォルトでfork-join-executorを利用している
  // https://miyakawataku.hatenablog.com/entry/20171228/1514472588


  // fork-join-executor・・・設定にもよるが、基本的にCPUコア分のスレッドを作る。それらのスレッドがidle状態になったら、すぐに他のタスクを割り当てて、
  // スレッドが遊ばないよう、常に働くようにしてくれる。
  // ex) スレッドAのタスクキューが空になると、スレッドBのタスクキューからタスクを奪って処理する。処理後に、２つをjoinする。
  // CPU効率が良い！
  executor = "fork-join-executor"

  fork-join-executor {
    parallelism-min = 2
    // （プロセッサー(CPUコア)の数 * 以下設定したfactor）が、プールするスレッド数
    parallelism-factor = 1.0

    // プール内のスレッドの最大数
    // これを上限に、有効なプロセッサーごとに１つのスレッドを作るようになる
    parallelism-max = 10
  }

  throughput = 100
}


my-thread-pool-executor {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // プールするスレッド数を固定
    fixed-pool-size = 10
  }
  throughput = 1
}
